;------------------------------------------------------------
;------------ WABBIT PARAMETER FILE TEMPLATE ----------------
;------------------------------------------------------------
; if you add new parameters, add them here.
; note values have to be declared "value=0;", with equal sign (=) and semicolon (;)


[Domain]
; 2D or 3D problem?
dim=3;
; box size of computational domain. [Lx Ly Lz]
domain_size=3 3 3;
; synchronization (on/off)on [x y z] domain boundaries
; (off (NON-PERIODIC): 0/false/yes | on (PERIODIC): 1/true/no)
periodic_BC=1 1 1;
symmetry_BC=0 0 0;


[Wavelet]
; which wavelet to use: CDF20, CDF22, CDF40, CDF42, CDF44, CDF46, CDF60 or CDF62
; required number of ghost nodes: 2, 3, 4, 5, 7, 9, 6, 7
wavelet=CDF22;
cvs=0;

[Blocks]
; size of each block, must be even, if given one value this is used
; for all directions, or specify value for each direction
number_block_nodes=8;
; ghost nodes for each block. If you leave it empty, it will be set according
; to the wavelet. (see Wavelet::wavelet). If the discretization scheme requires
; more ghost nodes, set the value here.
number_ghost_nodes=;
; For the right hand side, often less ghost nodes are required than for the wavelet, specify here.
; For a 4th order FD code, this is 2 (FD4) or 3 (TW4). 2nd order is 1. Default=number_ghost_nodes
number_ghost_nodes_rhs=2;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
; ACM: 3 (2D), 4 (3D) +  nscalars
; Convection: 1 (2D /3D)
number_equations=4;
; threshold value for thresholding wavelet coefficients
eps=1.0e-2;
; treelevel bounds
max_treelevel=4;
min_treelevel=1;
; switch for mesh adaption, 1=on, ...=off
adapt_tree=1;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_tree
adapt_inicond=1;
; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
inicond_refinements=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; [sfc_z | sfc_hilbert]
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;
; coarsening indicator to be used in mesh adaptation (=coarsening) [threshold-state-vector, random, primary-variables]
; threshold-state-vector: evaluates wavelet criterion on components of state vector. specify below which ones.
; random: randomly coarse some blocks. used for testing. note we tag for coarsening only once in the first iteration
; everywhere: coarsenes the entire grid by one level. note that this is strictly speaking, only guranteed to be possible
; if the grid has been refined "everyhwere" before.
coarsening_indicator=threshold-state-vector;
; WABBIT uses interpolating, biorthogonal wavelets. These wavelets are, by default, normalized in the Linfty
; norm. That means setting a threshold eps=1.0e-3, we guarantee that the error is < 1.0e-3 in Linfty norm.
; For denoising, we rather need to control the L2 error, because Donohos work is applicable only to the L2 norm.
; For CVS finally, which mimicks applying the denoising to vorticity, we need to control the H1 norm.
; [Linfty (default), L2, H1]
eps_norm=Linfty;
; sometimes, it can be useful to use a different indicator to generate the initial grid. For example, we can generate
; some non-equidistant grid for inicond, then use coarsening_indicator=everywhere
; default: same as coarsening_indicator
coarsening_indicator_inicond=;
; use normalization for eps or not? Thresholding means we control the absolute error in some norm (often Linfty norm, see below)
; but very often, you rather want to control the relative error. So, some norm of the field is computed, such that
; || u-u_eps || / ||u|| < eps  (using the norm specified below)
; default=0, even though this is stupid: if you have large pressure (say u=1 and pressure=10000), then only the pressure will determine
; the grid
eps_normalized=1;
; which components to use for coarsening_indicator? default is all components.
; active only if coarsening_indicator=threshold-state-vector. select the components, set as
; many as number_equations
threshold_state_vector_component=1 1 1 1;
; it can be useful to also use the mask function (if penalization is used) for grid adaptation.
; i.e. the grid is always at the finest level on mask interfaces. Careful though: the Penalization
; is implemented on physics-module level, i.e. it is not available for all modules.
threshold_mask=1;
; if this flag is set (1), then blocks on max level have to coarsen, even if their
; details are significant. This is equivalent to ensuring dealiasing. Hence, if set to 1,
; wabbit will evaluate the right hand side of your equation on max_treelevel, but in the mesh
; coarsening it will, regardless of the solution, downsample the result to max_treelevel-1. Your
; expected precision is thus max_treelevel-1, but the computational cost (derivatives and timestep)
; is on max_treelevel.
force_maxlevel_dealiasing=0;
; if desired, we perform more than one time step
; before adapting the grid again. this can further reduce the overhead of adaptivity
; Note: the non-linear terms can create finer scales than resolved on the grid. they
; are usually filtered by the coarsening/refinement round trip. So if you do more than one time step
; on the grid, consider using a filter. default is "1", which is the classical scheme
N_dt_per_grid=4;
; coarseExtension means we delete wavelet coefficients near a coarse/fine interface. This
; allows us to skip the linear system that would occur otherwise, and it avoids artifacts
; observed with the lifted wavelets. Default=1, you shoudn't use 0
useCoarseExtension=1;
; the coarseExtension means deleting WC near the interface. However, if a significant WC travels towards
; this interface, then it may be deleted. The additional security zone (which is different from the safety
; zone = refine_everywhere) adds more blocks so that this will not happen. Default=1, you shoudn't use 0
useSecurityZone=1;


[Time]
; final time to reach in simulation
time_max=1.0;
; maximum walltime allowed for simulations (in hours). The run will be stopped if this duration
; is exceeded. This is useful on real clusters, where the walltime of a job is limited, and the
; system kills the job regardless of whether we're done or not. If WABBIT itself ends execution,
; a backup is written and you can resume the simulation right where it stopped. Note you can also
; stop a run using the file "runtime_control" (set runtime_control=save_stop;)
walltime_max=19.5;
; number of time steps performed. if not set, default value is very large
nt=;
; CFL criterium (velocity). Note the time step dt is dictated by the physics modules: some eqns (like
; the heat eqn, which is not implemented) may not even have a CFL restriction.
CFL=0.75;
; CFL critierum for penalization (dt<=CFL_eta*C_eta), if VPM is used. For RungeKuttaGeneric schemes, the constant
; has to be < 1.0 (otherwise the code is unstable). For krylov schemes, it can be greater
; 1, but be careful about the error. This parameter is used by ACM physics module only.
CFL_eta=999999;
; time step restriction of viscous terms ( dt < CFL_NU * dx**2 / nu )
; runge kutta 4 has constraints: 2D=>0.14 3D=>0.094 (exact expression: 2.79/(dim*pi**2)), these are
; the default values
CFL_nu=999999;
; wabbit can save the heavy data (flow fiels) to HDF5. What is saved depends on the physics modules
; and the section [Saving]. Here you control WHEN you want to save the output: either after a fixed
; number of time steps [fixed_freq], or after a physical time interval [fixed_time]
write_method=fixed_time;
; if write_method=fixed_freq:
; write frequency for output, choose very large number for disabling output on disk
write_freq=2;
; if write_method=fixed_time:
; write time for output
write_time=0.25;
; fixed time step. if the value is greater 0.0, then the time step is fixed no matter what.
; the setting from the physics modules, which usually decide about dt, are ignored and over-
; written. The default is 0.0, so not used. NOTE: WABBIT still will adjust dt to precisely match
; the time for saving and statistics and the final time, if any of those is not a multiple of dt_fixed.
; In that case, some time steps may be smaller in order to reach those times.
dt_fixed=;
; largest time step, if you want to set one. dt is always smaller than that, if the
; value is greater 0. default is 0.0, so not used. WABBIT overwrites the physics module dt
; by that value, if the timestep is larger than dt_max and dt_max > 0.
dt_max=;
; time-step method. can be either "RungeKuttaGeneric" or "Krylov". In the former case,
; any explicit Runge-Kutta scheme can be set by using the Butcher-Tableau. (RK4 is default) In the latter,
; the number of Krylov subspaces M_krylov can be set.
; [ RungeKuttaGeneric, Krylov ]
time_step_method=RungeKuttaChebychev;
; The usual RungeKuttaChebychev method contains a number of hard coded schemes for different
; number of stages "s" and the fixed damping coefficient eps=10.0 (see Verwer and Sommeijer)
; if you want to use another RKC scheme, you can do so by settting it up in this INI-file.
; Provide coefficients with length "s". they are usually precomputed in python.
RKC_custom_scheme=yes;
RKC_mu=0.000000e+00, 5.000000e-01, 2.340887e+00, 2.065456e+00, 1.988879e+00, 1.951476e+00, 1.926970e+00, 1.908180e+00, 1.892563e+00, 1.879047e+00, 1.867113e+00;
RKC_mu_tilde=2.846968e-02, 1.423484e-02, 6.664430e-02, 5.880287e-02, 5.662274e-02, 5.555790e-02, 5.486022e-02, 5.432529e-02, 5.388066e-02, 5.349586e-02, 5.315612e-02;
RKC_nu=0.000000e+00, -1.000000e+00, -2.870999e-01, -1.185985e+00, -1.007644e+00, -9.520377e-01, -9.224034e-01, -9.019389e-01, -8.858343e-01, -8.723096e-01, -8.605794e-01;
RKC_gamma_tilde=0.000000e+00, -0.000000e+00, -4.966944e-02, -4.062435e-02, -3.757246e-02, -3.568839e-02, -3.414432e-02, -3.271668e-02, -3.133588e-02, -2.998255e-02, -2.865568e-02;
RKC_c=2.846968e-02, 2.846968e-02, 7.544552e-02, 1.402433e-01, 2.219550e-01, 3.194924e-01, 4.316362e-01, 5.570857e-01, 6.945064e-01, 8.425721e-01, 1.000000e+00;
s=11;
;-------------------


[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes]
physics_type=ACM-new;
; decide if you want to start from a given configuration (i.e. Statevector)
; 1:true, 0:false and we start from the initial conditions dictated by the physics
; modue.
read_from_files=1;
; if read_from_files is true, WABBIT will try to start from the given files
input_files=ux_000001608863.h5 uy_000001608863.h5 uz_000001608863.h5 p_000001608863.h5;


[Saving]
; WABBIT is in charge of saving, but what is saved is controled by the physics modules.
; here, you need to tell WABBIT how many fields are saved and how they will be labeled.
; The physics modules are then in charge of providing the respective data to WABBIT. I.e.
; if the field is called "mask", WABBIT will ask the physics module to return the array
; "mask" and then save that to disk.
; how many fields are you going to save?
N_fields_saved=5;
; how are the fields labeled?
field_names=mask ux uy uz p;


[Statistics]
; save every nsave time steps (leave empty to disable)
nsave_stats=10;
; and every tsave physical time units (leave empty to disable)
tsave_stats=;


[ACM-new]
; speed of sound, used also for the CFL condition. The characteristic velocity is
; u_eigen = umax + sqrt(umax**2 + c0**2)
c_0=20.00;
; viscosity. We also respect the time step constraint imposed by explicit diffusion
nu=0.130224742701113; 
; damping term for pressure, see [Ohwada, Asinari, JCP2010]
gamma_p=0;
; use mean flow forcing or not
forcing=0;
; what method to use for forcing? available: accelerate / none / fixed
; specifiy at least Dim entries for each component
forcing_type=none none none;
; if mean flow forcing is used, this is the values for the mean velocities:
u_mean_set=-1.152834 0.023333 -0.159547;
; initial condition
inicond=meanflow;
; the mean pressure has no meaning in incompressible fluids, but sometimes it can
; be nice to ensure the mean is zero, e.g., for comparison wit other codes. if set to true
; wabbit removes the mean pressure at every time step.
p_mean_zero=no;
; if inicond= pressure-blob
beta=0.05;
; we can use passive scalars with the ACM. their parameters are specified in "ConvectionDiffusion" below
; but they need to be turned on here. Default is off.
use_passive_scalar=0;

[Sponge]
; sponge term, used in ACM module to mimick outflow conditions for pressure waves
use_sponge=1;
; shape of the sponge. the tradional form (default) is "rect", but we have a smoothed
; version with round corners which is called "p-norm". It has the parameter p_sponge,
; which controls the roundedness of corners. The function is inspired by the p-norm
; ((x-x0)**p + (y-y0)**p + (z-z0)**p)**1/p [https://de.wikipedia.org/wiki/P-Norm]
; a good compromise is p=20.0
sponge_type=p-norm;
; p-sponge is used only in conjunction with sponge_type=p-norm;
p_sponge=8.0;
; thickness of sponge layer (in physial units)
L_sponge=1.2;
; sponge damping constant
C_sponge=3.000000e-03;



[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_4th_central;
filter_type=no_filter;


[VPM]
; Volume penalization method to take obstacles into account without adapting the
; grid. Penalization is an equation-dependent addon. It can not be used with any
; RHS, if the RHS does not support it.
; flag for penalization (0/1)
penalization=1;
; WABBIT needs to know about the mask function (if penalization is used): does it contain
; a time-dependent-part (e.g. moving obstacles, time-dependent forcing)? does it contain
; a time-independent part (fixed walls, homogeneous forcing)? or both? WABBIT needs to know
; that since we try to create the time-independent mask function only once, but the time-dependent
; part of course in every time step.
mask_time_dependent_part=1;
mask_time_independent_part=1;
dont_use_pruned_tree_mask=1;
; smooth mask for penalization term [0,1]. If the obstacle moves, this flag should
; be set, and in static cases as well. hard masks with only 0 and 1 are deprecated but
; included for completeness. Note some mask functions may ignore this flag (the insects for example)
smooth_mask=1;
; penalization factor. Can be seen as porosity, so smaller values = harder walls
; Note for explicit time integration, dt < C_eta
C_eta=7.323296e-06;
; The mask geometry is PHYSICS MODULE SPECIFIC! Hence it depends on the module which values you can set.
; cNS: [funnel,triangle,cylinder,rhombus]
; ACM: [none,Insect,cylinder,two-cylinders] if "Insect", all other parameters are read from "Insect" section.
; ConvDiff: not implemented
geometry=Insect;
; center coordinate of object
x_cntr=0.5 0.5 0;
; [triangle,rhombus,cylinder]: length or diameter of the object
length=0.3;



[Insects]
;-------------------------------------------------------------------------------
; Body geometry
x_pivot_r=-0.1 0.25 0.05; (vector) position of right wing in body system
x_pivot_l=-0.1 -0.25 0.05; (vector) position of left wing in body system
x_pivot_r2=-0.1 0.25 0.05; (vector) position of right wing in body system
x_pivot_l2=-0.1 -0.25 0.05; (vector) position of left wing in body system


; Body (types: ellipsoid, drosophila, nobody)
BodyType=emundus;
HasDetails=no; legs; antennae_proboscis; no;
RightWing=yes;
LeftWing=yes;

RightWing2=yes;
LeftWing2=yes;
b_body=0.2;
L_body=1.0;
R_head=0.20;
R_eye=0.075;
x_head=0.0 0.0 0.0; (vector) 
x_eye_r=; (vector)
x_eye_l=; (vector)
J_body_yawpitchroll=1.0 1.0 1.0; Body moment of inertia in body reference frame
mass=1.0; total mass of animal
gravity=1.0; negative: falling in negative z-direction
;-------------------------------------------------------------------------------
; Wing geometry (Shapes: rectangular, TwoEllipses, drosophila, drosophila_mutated,
; drosophila_sandberg, drosophila_maeda, flapper_sane)
WingShapeL=from_file::../WING_v3_forewing.ini;
WingShapeR=from_file::../WING_v3_forewing.ini;
WingShape2L=from_file::../WING_v3_hindwing.ini;
WingShape2R=from_file::../WING_v3_hindwing.ini;
b_top=0.125; if WingShape=TwoEllipses, that's thickness of the forward one
b_bot=0.125; if WingShape=TwoEllipses, that's thickness of the backward one
L_chord=0.25;
L_span=1.0;
WingThickness=0.08; default thickness is 4*dx
; wing inertia tensor (used to compute inertial power)
Jxx=0.0449778658;
Jyy=0.0019346856;
Jzz=0.0469125514;
Jxy=-0.0007459554;
;-------------------------------------------------------------------------------
; Body motion
; motion of the body: (tethered, free_flight)
BodyMotion=yawpitchroll_param;
x0=; initial (or tethered) position
v0=0 0 0; inital velocity
; ---- data 6 -----
yawpitchroll_0=16.258889 -35.145050 -23.629201; initial (or tethered, or time-average) orientation in degrees
yawpitchroll_a1=2.245833 -3.614572 -7.958057; if BodyMotion=yawpitchroll_param first cosine harmonic component
yawpitchroll_b1=-7.036808 -0.784848 7.796858; if BodyMotion=yawpitchroll_param first sine harmonic component


eta0=+180.0; stroke plane angle in degrees
DoF=000000; x,y,z,yaw,pitch,roll DoF on=1 or off=0
startup_conditioner=yes;
;-------------------------------------------------------------------------------
; Wing motion
; (types: Drosophila_hovering_fry, Drosophila_hovering_maeda, flapper_sane,
; flapper_dickinson, takeoff, simplified, from_file, none)
FlappingMotion_right=from_file::../kinematics_data_6_R.ini;
FlappingMotion_left=from_file::../kinematics_data_6_L.ini;
FlappingMotion_right2=from_file::../kinematics_hindwing_collisionfree_data_6_R.ini;
FlappingMotion_left2=from_file::../kinematics_hindwing_collisionfree_data_6_L.ini;
; if flappingmotion=="from_file", which file to use?
infile=none;
init_alpha_phi_theta=0.0 0.0 0.0;
;-------------------------------------------------------------------------------


[Debug]
; check if the ghost node synchronization gives the right order, on a random
; grid. this test costs some CPU time but no memory. It is done only once at startup.
test_ghost_nodes_synch=1;
test_treecode=0;
; internal testing routine for the ghost nodes: allocates HUGE amounts of memory
check_redundant_nodes=0;
ghost_nodes_redundant_point_coarseWins=0;
iter_ghosts=0;
