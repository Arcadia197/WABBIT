;------------------------------------------------------------
;------------ WABBIT PARAMETER FILE TEMPLATE ----------------
;------------------------------------------------------------
; if you add new parameters, add them here.
; note values have to be declared "value=0;", with equal sign (=) and semicolon (;)


[Domain]
; 2D or 3D problem?
dim=3;
; box size of computational domain. [Lx Ly Lz]
domain_size=2 2 2;
; synchronization (on/off)on [x y z] domain boundaries
; (off (NON-PERIODIC): 0/false/yes | on (PERIODIC): 1/true/no)
periodic_BC=1 1 1;


[Blocks]
; size of each block, must be odd (17, 33, 65 etc),
; if given one value this is meant for all directions, or specify value for each direction
number_block_nodes=8;
; ghost nodes for each block. It is possible that in current versions, one can only
; set even values
number_ghost_nodes=;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
; ACM: 3 (2D), 4 (3D) +  nscalars
; Convection: 1 (2D /3D)
number_equations=4;
; threshold value for thresholding wavelet coefficients
eps=1.0e-2;1e-4;
; treelevel bounds
max_treelevel=3;
min_treelevel=1;
; switch for mesh adaption, 1=on, ...=off
adapt_mesh=1;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_mesh
adapt_inicond=1;
; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
inicond_refinements=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; equal -> simple uniformly distribution
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;
; coarsening indicator to be used in mesh adaptation [threshold-state-vector,random,threshold-vorticity]
; threshold-state-vector: evaluates wavelet criterion on components of state vector. specify below which ones.
; threshold-vorticity: evaluates wavelet criterion on vorticity
;random
;randomly coarse some blocks. used for testing. note we tag for coarsening
;only once in the first iteration
coarsening_indicator=threshold-state-vector;
; use normalization for eps or not? normalization is done with INFTY norm currently. default
; is no normalization (0). ATTENTION works only for ACM currently (TODO!)
eps_normalized=1;
; which components to use for coarsening_indicator? default is all components.
; active only if coarsening_indicator=threshold-state-vector. select the components, set as
; many as number_equations
threshold_state_vector_component=1 1 1 1;
; it can be useful to also use the mask function (if penalization is used) for grid adaptation.
; i.e. the grid is always at the finest level on mask interfaces. Careful though: the Penalization
; is implemented on physics-module level, i.e. it is not available for all modules.
threshold_mask=1;
; if this flag is set (1), then blocks on max level have to coarsen, even if their
; details are significant. This is equivalent to ensuring dealiasing. Hence, if set to 1,
; wabbit will evaluate the right hand side of your equation on max_treelevel, but in the mesh
; coarsening it will, regardless of the solution, downsample the result to max_treelevel-1. Your
; expected precision is thus max_treelevel-1, but the computational cost (derivatives and timestep)
; is on max_treelevel.
force_maxlevel_dealiasing=0;
; if desired, we perform more than one time step
; before adapting the grid again. this can further reduce the overhead of adaptivity
; Note: the non-linear terms can create finer scales than resolved on the grid. they
; are usually filtered by the coarsening/refinement round trip. So if you do more than one time step
; on the grid, consider using a filter. default is "1", which is the classical scheme
N_dt_per_grid=4;


[Wavelet]
wavelet=CDF22;


[Time]
; final time to reach in simulation
time_max=0.01;
; maximum walltime allowed for simulations (in hours). The run will be stopped if this duration
; is exceeded. This is useful on real clusters, where the walltime of a job is limited, and the
; system kills the job regardless of whether we're done or not. If WABBIT itself ends execution,
; a backup is written and you can resume the simulation right where it stopped. Note you can also
; stop a run using the file "runtime_control" (set runtime_control=save_stop;)
walltime_max=19.5;
; number of time steps performed. if not set, default value is very large
nt=;
; CFL criterium (velocity). Note the time step dt is dictated by the physics modules: some eqns (like
; the heat eqn, which is not implemented) may not even have a CFL restriction.
CFL=1.0;
; CFL critierum for penalization (dt<=CFL_eta*C_eta), if VPM is used. For RungeKuttaGeneric schemes, the constant
; has to be < 1.0 (otherwise the code is unstable). For krylov schemes, it can be greater
; 1, but be careful about the error. This parameter is used by ACM physics module only.
CFL_eta=9999;
; time step restriction of viscous terms ( dt < CFL_NU * dx**2 / nu )
; runge kutta 4 has constraints: 2D=>0.14 3D=>0.094 (exact expression: 2.79/(dim*pi**2)), these are
; the default values
CFL_nu=9999;
; wabbit can save the heavy data (flow fiels) to HDF5. What is saved depends on the physics modules
; and the section [Saving]. Here you control WHEN you want to save the output: either after a fixed
; number of time steps [fixed_freq], or after a physical time interval [fixed_time]
write_method=fixed_time;
; if write_method=fixed_freq:
; write frequency for output, choose very large number for disabling output on disk
write_freq=2;
; if write_method=fixed_time:
; write time for output
write_time=0.25;
; fixed time step. if the value is greater 0.0, then the time step is fixed no matter what.
; the setting from the physics modules, which usually decide about dt, are ignored and over-
; written. The default is 0.0, so not used. NOTE: WABBIT still will adjust dt to precisely match
; the time for saving and statistics and the final time, if any of those is not a multiple of dt_fixed.
; In that case, some time steps may be smaller in order to reach those times.
dt_fixed=;
; largest time step, if you want to set one. dt is always smaller than that, if the
; value is greater 0. default is 0.0, so not used. WABBIT overwrites the physics module dt
; by that value, if the timestep is larger than dt_max and dt_max > 0.
dt_max=;
; time-step method. can be either "RungeKuttaGeneric" or "Krylov". In the former case,
; any explicit Runge-Kutta scheme can be set by using the Butcher-Tableau. (RK4 is default) In the latter,
; the number of Krylov subspaces M_krylov can be set.
; [ RungeKuttaGeneric, Krylov ]
time_step_method=RungeKuttaChebychev;
; The usual RungeKuttaChebychev method contains a number of hard coded schemes for different
; number of stages "s" and the fixed damping coefficient eps=10.0 (see Verwer and Sommeijer)
; if you want to use another RKC scheme, you can do so by settting it up in this INI-file.
; Provide coefficients with length "s". they are usually precomputed in python.
RKC_custom_scheme=yes;
; (complicated) coefficients following Verwer & Sommeijer follow.
; longest scheme is 60 stages.
;-------------------
; C0=30.380000 C_eta=6.478766e-07 K_eta=0.500000 Bs=25
; dx=9.765625e-04 CFL=1.000000 jmax=9
;-------------------
; Best RKC scheme given eigenvalues
; s=22.0 eps=0.422
; dt=3.214491e-05
; cost = 684400.6 [NRHS/T]
;-------------------
RKC_mu=0.000000e+00, 5.000000e-01, 2.367620e+00, 2.105221e+00, 2.042316e+00, 2.018216e+00, 2.006343e+00, 1.999378e+00, 1.994712e+00, 1.991245e+00, 1.988460e+00, 1.986087e+00, 1.983981e+00, 1.982055e+00, 1.980258e+00, 1.978556e+00, 1.976930e+00, 1.975364e+00, 1.973849e+00, 1.972378e+00, 1.970948e+00, 1.969554e+00;
RKC_mu_tilde=6.549458e-03, 3.274729e-03, 1.550663e-02, 1.378806e-02, 1.337606e-02, 1.321822e-02, 1.314046e-02, 1.309484e-02, 1.306428e-02, 1.304158e-02, 1.302333e-02, 1.300779e-02, 1.299400e-02, 1.298138e-02, 1.296961e-02, 1.295847e-02, 1.294782e-02, 1.293756e-02, 1.292764e-02, 1.291801e-02, 1.290864e-02, 1.289951e-02;
RKC_nu=0.000000e+00, -1.000000e+00, -2.954371e-01, -1.243921e+00, -1.073009e+00, -1.028664e+00, -1.010545e+00, -1.001113e+00, -9.953094e-01, -9.912608e-01, -9.881537e-01, -9.855939e-01, -9.833740e-01, -9.813775e-01, -9.795359e-01, -9.778068e-01, -9.761635e-01, -9.745883e-01, -9.730695e-01, -9.715989e-01, -9.701710e-01, -9.687818e-01;
RKC_gamma_tilde=0.000000e+00, -0.000000e+00, -1.162322e-02, -9.686124e-03, -9.165556e-03, -8.940022e-03, -8.811826e-03, -8.723235e-03, -8.652510e-03, -8.590061e-03, -8.531179e-03, -8.473374e-03, -8.415264e-03, -8.356059e-03, -8.295311e-03, -8.232775e-03, -8.168333e-03, -8.101949e-03, -8.033643e-03, -7.963474e-03, -7.891522e-03, -7.817891e-03;
RKC_c=6.549458e-03, 6.549458e-03, 1.745509e-02, 3.270174e-02, 5.226831e-02, 7.612786e-02, 1.042477e-01, 1.365896e-01, 1.731100e-01, 2.137601e-01, 2.584862e-01, 3.072298e-01, 3.599282e-01, 4.165144e-01, 4.769175e-01, 5.410633e-01, 6.088740e-01, 6.802692e-01, 7.551657e-01, 8.334782e-01, 9.151193e-01, 1.000000e+00;
s=22;
;-------------------
; if time_step_method is krylov, then you can specify the dimension of the krylov subspace
; below. If dynamic subspace dimensions are used, we interpret this number as the maximum
; number of spaces admissible (the method requires a lot of memory in general)
M_krylov=12;
; fixed or dynamic krylov subspace dimension:
; [ fixed, dynamic ]
krylov_subspace_dimension=dynamic;
; if dynamic subspace dimensionality is used, provide the residuum threshold here. Note this is
; in general not an exact measure for the error, but rather a good indicator.
krylov_err_threshold=1.0e-2;
; butcher_tableau
; use your butcher_tableau for the Runge Kutta time step function
; e.g. RK4:
; butcher_tableau=(/ 0.0 0.0 0.0 0.0 0.0
; 0.5 0.5 0.0 0.0 0.0
; 0.5 0.0 0.5 0.0 0.0
; 1.0 0.0 0.0 1.0 0.0
; 0.0 0.16666666666666666 0.33333333333333331 0.33333333333333331  0.16666666666666666 /)


[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes]
physics_type=ACM-new;
; decide if you want to start from a given configuration (i.e. Statevector)
; 1:true, 0:false and we start from the initial conditions dictated by the physics
; modue.
read_from_files=1;
; if read_from_files is true, WABBIT will try to start from the given files
input_files=ux_000002950000.h5 uy_000002950000.h5 uz_000002950000.h5 p_000002950000.h5;



[Saving]
; WABBIT is in charge of saving, but what is saved is controled by the physics modules.
; here, you need to tell WABBIT how many fields are saved and how they will be labeled.
; The physics modules are then in charge of providing the respective data to WABBIT. I.e.
; if the field is called "mask", WABBIT will ask the physics module to return the array
; "mask" and then save that to disk.
; how many fields are you going to save?
N_fields_saved=5;
; how are the fields labeled?
field_names=mask ux uy uz p;


[Statistics]
; save every nsave time steps (leave empty to disable)
nsave_stats=10;
; and every tsave physical time units (leave empty to disable)
tsave_stats=;


[ACM-new]
; speed of sound, used also for the CFL condition. The characteristic velocity is
; u_eigen = umax + sqrt(umax**2 + c0**2)
c_0=30.38;
; viscosity. We also respect the time step constraint imposed by explicit diffusion
nu=0.368;
; damping term for pressure, see [Ohwada, Asinari, JCP2010]
gamma_p=0;
; use mean flow forcing or not
forcing=0;
; what method to use for forcing? available: accelerate / none / fixed
; specifiy at least Dim entries for each component
forcing_type=fixed none fixed;
; if mean flow forcing is used, this is the values for the mean velocities:
u_mean_set=-0.607 0.0 -0.498;
; initial condition
inicond=meanflow;
; the mean pressure has no meaning in incompressible fluids, but sometimes it can
; be nice to ensure the mean is zero, e.g., for comparison wit other codes. if set to true
; wabbit removes the mean pressure at every time step.
p_mean_zero=no;
; if inicond= pressure-blob
beta=0.05;
; we can use passive scalars with the ACM. their parameters are specified in "ConvectionDiffusion" below
; but they need to be turned on here. Default is off.
use_passive_scalar=0;

[Sponge]
; sponge term, used in ACM module to mimick outflow conditions for pressure waves
use_sponge=1;
; shape of the sponge. the tradional form (default) is "rect", but we have a smoothed
; version with round corners which is called "p-norm". It has the parameter p_sponge,
; which controls the roundedness of corners. The function is inspired by the p-norm
; ((x-x0)**p + (y-y0)**p + (z-z0)**p)**1/p [https://de.wikipedia.org/wiki/P-Norm]
; a good compromise is p=20.0
sponge_type=p-norm;
; p-sponge is used only in conjunction with sponge_type=p-norm;
p_sponge=20.0;
; thickness of sponge layer (in physial units)
L_sponge=1.2;
; sponge damping constant
C_sponge=2.4E-03;



[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_2nd_central;FD_4th_central_optimized;
; filtering of equations. NOTE: the filters are PHYSICS MODULE SPECIFIC! Hence it depends on the module
; which values you can set here.
; cNS: [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | bogey_shock | wavelet_filter]
; ACM: [no_filter | wavelet_filter | explicit_7pt]
; ConvDiff: not implemented
filter_type=no_filter;
; filter frequency (note: set filter to no_filter if you want to disable filtering completely)
; Note our clumsy nomenclature: we mean filtering every "filter_freq" time steps
filter_freq=10;
; usually, a filter would be applied to all blocks, but it is also sometimes useful to apply it just for
; the finest blocks (those that cannot be refined anymore). If maxlevel dealiasing is FALSE and this option is TRUE,
; the result is equivalent to maxlevel_dealiasing TRUE, if the filter is wavelet and it is applied in every time step
filter_only_maxlevel=no;


[VPM]
; Volume penalization method to take obstacles into account without adapting the
; grid. Penalization is an equation-dependent addon. It can not be used with any
; RHS, if the RHS does not support it.
; flag for penalization (0/1)
penalization=1;
; WABBIT needs to know about the mask function (if penalization is used): does it contain
; a time-dependent-part (e.g. moving obstacles, time-dependent forcing)? does it contain
; a time-independent part (fixed walls, homogeneous forcing)? or both? WABBIT needs to know
; that since we try to create the time-independent mask function only once, but the time-dependent
; part of course in every time step.
mask_time_dependent_part=1;
mask_time_independent_part=0; 1;
dont_use_pruned_tree_mask=1;
; smooth mask for penalization term [0,1]. If the obstacle moves, this flag should
; be set, and in static cases as well. hard masks with only 0 and 1 are deprecated but
; included for completeness. Note some mask functions may ignore this flag (the insects for example)
smooth_mask=1;
; penalization factor. Can be seen as porosity, so smaller values = harder walls
; Note for explicit time integration, dt < C_eta
C_eta=6.478766e-07;
; The mask geometry is PHYSICS MODULE SPECIFIC! Hence it depends on the module which values you can set.
; cNS: [funnel,triangle,cylinder,rhombus]
; ACM: [none,Insect,cylinder,two-cylinders] if "Insect", all other parameters are read from "Insect" section.
; ConvDiff: not implemented
geometry=Insect;
; center coordinate of object
x_cntr=6.0 6.0 6.0;
; [triangle,rhombus,cylinder]: length or diameter of the object
length=0.3;



[Insects]
;-------------------------------------------------------------------------------
; Body geometry
x_pivot_r=0.10 -0.111 0.046; (vector) position of right wing in body system
x_pivot_l=0.10 +0.108 0.046; (vector) position of left wing in body system
x_pivot_r2=0.139 -0.071 0.078; (vector) position of 2nd right wing in body system
x_pivot_l2=0.139 +0.069 0.078; (vector) position of 2nd left wing in body system
; Body (types: ellipsoid, drosophila, nobody)
BodyType=superSTL;
BodySuperSTLfile=../paratuposa_7736poly_b.sstl;
HasDetails=all; legs; antennae_proboscis; no;
RightWing=yes;
LeftWing=yes;
RightWing2=yes;
LeftWing2=yes;
b_body=0.2;
L_body=1.0;
R_head=0.20;
R_eye=0.075;
x_head=0.0 0.0 0.0; (vector) 
x_eye_r=; (vector)
x_eye_l=; (vector)
J_body_yawpitchroll=1.0 1.0 1.0; Body moment of inertia in body reference frame
mass=1.0; total mass of animal
gravity=1.0; negative: falling in negative z-direction
;-------------------------------------------------------------------------------
; Wing geometry (Shapes: rectangular, TwoEllipses, drosophila, drosophila_mutated,
; drosophila_sandberg, drosophila_maeda, flapper_sane)
WingShapeL=from_file::../wing_shape_left.ini;
WingShapeR=from_file::../wing_shape_right.ini;
WingShape2=from_file::../elytra_shape.ini;
b_top=0.125; if WingShape=TwoEllipses, that's thickness of the forward one
b_bot=0.125; if WingShape=TwoEllipses, that's thickness of the backward one
L_chord=0.25;
L_span=1.0;
WingThickness=0.008; default thickness is 4*dx
; wing inertia tensor (used to compute inertial power)
Jxx=0.0434681133556025;
Jyy=0.00350282722287657;
Jzz=0.0469709405784791;
Jxy=-0.00477567313224710;
Jxx2=0.207650067675664;
Jyy2=0.00877309124313899;
Jzz2=0.216423158918803;
Jxy2=0.0238210668105357;
;-------------------------------------------------------------------------------
; Body motion
x0=; initial (or tethered) position
v0=0 0 0; inital velocity
; motion of the body: (tethered, free_flight)
BodyMotion=yawpitchroll_param;
yawpitchroll_0=0.0 -64.7 0.0; initial (or tethered) orientation in degrees
yawpitchroll_a1=0.0 6.4304 0.0; first cosine harmonic component used with yawpitchroll_param
yawpitchroll_b1=0.0 13.6398 0.0; first sine harmonic component used with yawpitchroll_param
eta0=-33.5; stroke plane angle in degrees
DoF=000000; x,y,z,yaw,pitch,roll DoF on=1 or off=0
startup_conditioner=yes;
;-------------------------------------------------------------------------------
; Wing motion
; (types: Drosophila_hovering_fry, Drosophila_hovering_maeda, flapper_sane,
; flapper_dickinson, takeoff, simplified, from_file, none)
FlappingMotion_right=from_file::../kine_paratuposa_wbref_iid2.ini;
FlappingMotion_left=from_file::../kine_paratuposa_wbref_iid2.ini;
FlappingMotion_right2=from_file::../kine_paraelytra_iid2.ini;
FlappingMotion_left2=from_file::../kine_paraelytra_iid2.ini;
; if flappingmotion=="from_file", which file to use?
infile=none;
init_alpha_phi_theta=0.0 0.0 0.0;
;-------------------------------------------------------------------------------
smoothing_thickness=global;

[Debug]
; check if the ghost node synchronization gives the right order, on a random
; grid. this test costs some CPU time but no memory. It is done only once at startup.
test_ghost_nodes_synch=1;
test_treecode=0;
; internal testing routine for the ghost nodes: allocates HUGE amounts of memory
check_redundant_nodes=0;
