function main
    % AMR prototype - plotscript
    clear all
    close all
    clc
    figure

    files = dir('../data_*.h5');
    
    Bs = 33; %129;%17;
    g = 4;

    % loop over files
    for k = 1:length(files)
        % get filename
        filename = ['../' files(k).name];
        % read the file
        [data, time] = read_wabbit_hdf( filename );

        %------------
        % plotting
        %------------
        clf
        hold on    
        for j=1:length(data)
            coord_x = data(j).coord_x;
            coord_y = data(j).coord_y;
            
            datafield = data(j).field(g+1:Bs+g,g+1:Bs+g);

            % no plotting for block points in positive axis direction (overlap with neigbor block)
            [X,Y] = meshgrid( coord_x, coord_y );
            pcolor(X,Y,datafield)

            line([ coord_x(1) coord_x(1) ],[ coord_y(1) coord_y(end)],'color','w')
            line([ coord_x(end) coord_x(end) ],[ coord_y(1) coord_y(end)],'color','w')

            line([ coord_x(1) coord_x(end) ],[ coord_y(1) coord_y(1)],'color','w')
            line([ coord_x(1) coord_x(end) ],[ coord_y(end) coord_y(end)],'color','w')

        end
        shading flat
        colorbar
        axis equal
        title(filename)
        drawnow

    end
    
end

function [data, time] = read_wabbit_hdf( filename )
    %% [data, time] = read_wabbit_hdf( filename )
    % read in a block-based adaptive mesh, as generated by WABBIT code.
    % the struct 'data' will contain the elements 'data.field', 'data.coord_y',
    % 'data.coord_y'

    % open file in read-only mode
    file_id = H5F.open( filename, 'H5F_ACC_RDWR','H5P_DEFAULT');

    % determine how many blocks we have in the file
    group_id = H5G.open( file_id, '/');
    info = H5G.get_info(group_id);
    nblocks = info.nlinks;
    fprintf('file %s contains %i blocks\n',filename, nblocks)

    % now we know how many blocks (datasets) we found in the file, and we
    % will loop over all of them
    for i = 1 : nblocks
        dsetname = H5L.get_name_by_idx ( file_id, '/', 'H5_INDEX_NAME','H5_ITER_INC', i-1, 'H5P_DEFAULT');
        % read the block from the file (we now know its name)
        [field, coord_x, coord_y, time] = read_block_HDF5( file_id, dsetname );
        % copy data to structure (slow; since data list is not preallocated)
        data(i).field = field;
        data(i).coord_x = coord_x;
        data(i).coord_y = coord_y;
    end

    H5G.close(group_id)
    H5F.close(file_id)

end

function [field, coord_x, coord_y, time] = read_block_HDF5( file_id, dsetname )

    % open the dataset in the file
    dset_id = H5D.open( file_id, dsetname);

    attr_id = H5A.open( dset_id, 'coord_x');
    coord_x = H5A.read( attr_id );
    H5A.close(attr_id);

    attr_id = H5A.open( dset_id, 'coord_y');
    coord_y = H5A.read( attr_id );
    H5A.close(attr_id);

    % fetch time from the dataset
    attr_id = H5A.open( dset_id, 'time');
    time = H5A.read( attr_id );
    H5A.close(attr_id);


    % read file
    field = H5D.read( dset_id,'H5ML_DEFAULT', ...  ) % format in memory hier
        'H5S_ALL',... MEMORY
        'H5S_ALL',... DISK
        'H5P_DEFAULT');


    % close remaining HDF5 objects
    H5D.close(dset_id)

    field=double(field);
end